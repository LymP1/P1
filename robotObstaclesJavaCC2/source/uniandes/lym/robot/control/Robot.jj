/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	private HashMap <String, Integer > variables =new HashMap <String, Integer >();
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}
TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < GT : ">" >
| < EQUALS : "==" >
}

TOKEN: /* Nombres de Comandos */
{

			<MOV:  "Mov">
		
		| 	<PUT: "Put">
		| 	<PICK: "Pick">
		|  < POP: "Pop" >
		|  <GO: "GO" >
        |  < HOP:  "HOP" >
        

}
TOKEN:
{
  < ASSIGNTO:"assignTO">

}

TOKEN:
{
		<BALLOONS:  "BALLOONS" >
		|	<CHIPS:     "CHIPS"  >	

}






TOKEN : // PROCEDURES 
{
  < ROBOT_R : "ROBOT_R" >
| < VARS: "VARS" >
| < PROCS: "PROCS" >
}

TOKEN : // OPERATORS:
{
 
  < D: "left" | "right" | "around" >  //girar
| < LAT: "north" | "south" | "east" | "west" >
| < DIR: "front" | "right" | "left" | "back" > //DIRECCION
| < IF: "if" >
| < THEN: "then" >
| < ELSE: "else" >
| < WHILE: "while" >
| < DO: "do" >
| < REPEAT: "repeat" >
}

TOKEN : // INTRUCTIONS:
{
  < GOTO: "goto" >
| < MOVE: "move" >
| < TURN: "turn" >
| < FACE: "face" >
| < MOVETOTHE: "moveToThe" >
| < MOVEINDIR: "moveInDir" >
| < JUMPTOTHE: "jumpToThe" >
| < JUMPINDIR: "jumpindir" >
| < NOP: "nop" >
}

TOKEN: // CONDITION:
{
  < FACING:"facing">
| < CANPUT: "canPut" >
| < CANPICK: "canPick" >
| < CANMOVEINDIR: "canMoveInDir" >
| < CANJUMPINDIR: "canJumpJnDir" >
| < CANMOVETOTHE: "canMoveToThe" >
| < CANJUMPTOTHE: "canJumpToThe" >
| < NOT: "not" >
}

TOKEN :
{
 
 < ID : < LETTER > (< LETTER > | < DIGIT >)* >
| <NUM: (<DIGIT>)+ >
| < #DIGIT : [ "0"-"9" ] >
| < #LETTER : [ "a"-"z" ] >
}


	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema):
	{	
		
		int x,y;
		salida=new String();	
	}
	

	
	{
	  
		(		  (
		   "RIGHT" "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOV>  "(" x=num() ")" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ")" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()")" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ")"					  			
		|  <PICK> "(" get()  ")"	
	    |  < POP > "(" x=num() ")" {world.popBalloons(x); salida = "Comando:  Pop";} 
		) ";"
		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})+
   | comandGoto() { return true;}
   | comandMove() { return true;}
   | comandTurn() { return true;}
   |  <EOF> {return false;}




   
   


    	
	}

	void comandGoto ():
	{
	  int var;
	  int var2;
	}
	{
	  (
	  < GOTO > ":" var= varOrNum() "," var2=varOrNum()
	  {
		world.setPostion(var,var2);	    
	  }
	)
	}

	void comandTurn ():
	{
	  Token var;
	}
	{
	  (
	  < TURN > ":" var=< D > 
	  {
	    String x=var.image;
	    if (x.equals("right")) {
	      world.turnRight();
	    }
	    else if(x.equals("left")) {
	      world.turnRight();
	      world.turnRight();
	      world.turnRight()	;      
	    }
	    else if(x.equals("around")) {
	      world.turnRight();
	      world.turnRight();
	    }
	  }
	)
	}

	void commandFace():
	{
	  Token var;
	}
	{
	  (	    < FACE > ":" var=< LAT >
	    {
	      String x = var.image;
	      int orientacion = world.getFacing();
	      if (x.equals("north")) {
	        if (orientacion == SOUTH) {
	          world.turnRight();
	          world.turnRight();
	        }
	        else if (orientacion == EAST) {
	          world.turnRight();
	          world.turnRight();
	          world.turnRight();
	        }
	        else if (orientacion == WEST) {
	          world.turnRight();
	        }
	      }
	      else if (x.equals("south")) {
			if (orientacion == NORTH) {
			  world.turnRight();
			  world.turnRight();
			}
			else if (orientacion == EAST) {
			  world.turnRight();
			}
			else if (orientacion == WEST) {
			  world.turnRight();
			  world.turnRight();
			  world.turnRight();
			}
		  }
		  else if (x.equals("east")) {
		    if (orientacion == NORTH) {
			  world.turnRight();
		    }
		    else if (orientacion == SOUTH) {
			  world.turnRight();
			  world.turnRight();
			  world.turnRight();
		    }
		    else if (orientacion == WEST) {
			  world.turnRight();
			  world.turnRight();
		    }
	      }
		  else if (x.equals("west")) {
		    if (orientacion == NORTH) {
			  world.turnRight();
			  world.turnRight();
			  world.turnRight();
		    }
		    else if (orientacion == SOUTH) {
			  world.turnRight();
		    }
		    else if (orientacion == EAST) {
			  world.turnRight();
			  world.turnRight();
		    }
	      }
	    }
	  )
	}


	void comandMove ():
	{
	  int var;
	}
	{
	  (
	  < MOVE > ":" var= varOrNum()
	  {
	    
		world.moveForward(var,false);	    
	  }
	)
	}

	

	int varOrNum() throws Error:
	{
	  int total=0;
	  String variable;
	}
	{
	  (
	    < ID >
	    {
	      variable =token.image;
	      if(variables.get(variable) !=null) {
	        total= variables.get(variable);
	      }else {
	        throw new Error("La variable no existe");
	      }
	       return total;
	       
	     }
	    | < NUM > { try 
				{
					total = Integer.parseInt(token.image);
				} 
				catch (NumberFormatException ee) 
				{
					throw new Error("Number out of bounds: "+token.image+" !!");
				}
				return total; }		  )
	}


	

	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Number out of bounds: "+token.image+" !!");
			}
			return total;
		}
	}

	




void boulean():
{
}
{
  partBou() (( "||" | "&&" ) partBou())*
}

void partBou():
{
}
{
  varOrNum() (< GT > | < EQUALS >) varOrNum()
| "!" boulean()
}
